{"version":3,"sources":["logo.svg","components/Navbar.js","components/Footer.js","Hooks/useAxios.js","components/Form.js","components/Demo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","props","className","Footer","href","useAxios","baseUrl","useState","response","setResponse","error","setError","useEffect","a","axios","get","then","res","data","err","fetchData","Form","submit","name","setName","email","setEmail","class","id","onSubmit","e","preventDefault","onChange","target","value","type","placeholder","pattern","autofocus","required","Demo","headline","description","style","width","src","media","formats","large","url","Axios","post","console","log","catch","er","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,gGCS5BC,G,YAPA,SAACC,GACd,OACE,yBAAKC,UAAU,0CACb,wBAAIA,UAAU,QAAd,sBCeSC,G,KAlBA,WACb,OACI,4BAAQD,UAAU,uCAChB,yBAAKA,UAAU,sCACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,yBACb,wBAAIA,UAAU,mCAAd,cACA,8EAEF,yBAAKA,UAAU,yBACb,wBAAIA,UAAU,mCAAd,gBACA,yDAAoB,uBAAGE,KAAK,sCAAqC,0BAAMF,UAAU,gBAAhB,iBAA7C,KAApB,6B,+CCaCG,EAvBE,SAACC,GAAa,IAAD,EACMC,mBAAS,MADf,mBACnBC,EADmB,KACTC,EADS,OAEAF,mBAAS,MAFT,mBAEnBG,EAFmB,KAEZC,EAFY,KAmBzB,OAfDC,qBAAU,YACS,uCAAG,sBAAAC,EAAA,sDACf,IACGC,IAAMC,IAAIT,GACNU,MAAK,SAACC,GACJR,EAAYQ,EAAIC,SAEvB,MAAOC,GACNR,EAASQ,GAPG,2CAAH,qDAWfC,KACA,CAACd,IAEG,CAACE,WAAUE,UCORW,EA1BF,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACDf,mBAAS,MADR,mBAClBgB,EADkB,KACZC,EADY,OAECjB,mBAAS,MAFV,mBAElBkB,EAFkB,KAEXC,EAFW,KASzB,OACI,yBAAKC,MAAM,YACP,yBAAKC,GAAG,UACZ,0BAAMC,SARS,SAACC,GAChBA,EAAEC,iBACFT,EAAOC,EAAME,KAOT,2BAAOF,KAAK,aAAaS,SAAU,SAACF,GAAD,OAAON,EAAQM,EAAEG,OAAOC,QAAQC,KAAK,OAAOC,YAAY,OAAOC,QAAQ,gBAAeC,UAAU,YAAYC,SAAS,WAAWZ,MAAM,eACzK,2BAAOJ,KAAK,cAAcY,KAAK,QAAQH,SAAU,SAACF,GAAD,OAAOJ,EAASI,EAAEG,OAAOC,QAASE,YAAY,gBAAgBT,MAAM,eACrH,2BAAOQ,KAAK,SAASD,MAAM,aAAaP,MAAM,gBAC9C,yBAAKA,MAAM,eAAX,yKCYGa,EAzBF,WAAO,IAAD,EACanC,EAAS,oDAA7BG,EADO,EACPA,SADO,EACGE,MASlB,OACI,yBAAKR,UAAU,aACX,6BACKM,EAAW,4BAAKA,EAAS,GAAGiC,UAAiB,KAC7CjC,EAAW,2BAAIA,EAAS,GAAGkC,aAAmB,MAEnD,yBAAKxC,UAAU,cACVM,EAAW,yBAAKmC,MAAO,CAAEC,MAAO,QAAUC,IAAK,6CAA+CrC,EAAS,GAAGsC,MAAMC,QAAQC,MAAMC,MAAc,MAEjJ,yBAAK/C,UAAU,aACX,kBAAC,EAAD,CAAMoB,OAjBG,SAACC,EAAME,GACxByB,IAAMC,KAAK,sDAAuD,CAC9D5B,OAAME,UACPT,MAAK,SAACC,GAAD,OAASmC,QAAQC,IAAIpC,MAC5BqC,OAAM,SAACC,GAAD,OAAQH,QAAQC,IAAIE,YCMpBC,MAVf,WACE,OACE,yBAAKtD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFcuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAAAsD,GACJA,EAAaC,gBAEdjB,OAAM,SAAA5C,GACL0C,QAAQ1C,MAAMA,EAAM8D,c","file":"static/js/main.79c59999.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n    \nconst Navbar = (props) => {\n  return (\n    <nav className=\"navbar navbar-light bg-dark text-white\">\n      <h3 className=\"ml-5\">Dynamic Webpage</h3>\n    </nav>\n  );\n};\nexport default Navbar;\n","import React from 'react';\nimport '../App.css';\nconst Footer = () => {\n  return (\n      <footer className=\"page-footer font-small bg-blue pt-4\">\n        <div className=\"container text-center text-md-left\">\n          <div className=\"row\">\n            <div className=\"col-md-6 mt-md-0 mt-3\">\n              <h5 className=\"text-uppercase font-weight-bold\">Contact Us</h5>\n              <p>You can contact me on naveedshahid91@gmail.com</p>\n            </div>\n            <div className=\"col-md-6 mb-md-0 mb-3\">\n              <h5 className=\"text-uppercase font-weight-bold\">Headless CMS</h5>\n              <p>Built with ðŸ’• by <a href=\"https://github.com/naveedshahid786\"><span className=\"text-success\">Naveed Shahid</span> </a>Â© 2020 Copyright</p>\n            </div>\n          </div>\n        </div>\n      </footer>\n  );\n};\nexport default Footer;\n","import { useState, useEffect } from \"react\"\nimport axios from \"axios\"\n\nconst useAxios = (baseUrl) => {\n    const [response, setResponse] = useState(null)\n    const [error, setError] = useState(null)\n    \n    useEffect(() => {\n        const fetchData = async () => {\n           try {\n              axios.get(baseUrl)\n                 .then((res) => {\n                    setResponse(res.data);\n                 })\n           } catch (err) {\n              setError(err);\n           }\n        };\n  \n        fetchData();\n     }, [baseUrl]);\n\n     return {response, error}\n\n}\n\nexport default useAxios","import React, {useState} from 'react';\nimport '../App.css';\n\nconst Form = ( {submit} ) => {\n    const [name, setName] = useState(null)\n    const [email, setEmail] = useState(null)\n\n    const formSubmit = (e) => {\n        e.preventDefault()\n        submit(name, email)\n    }\n\n    return (\n        <div class=\"col-md-6\">\n            <div id=\"logbox\">\n        <form onSubmit={formSubmit}>\n            <input name=\"user[name]\" onChange={(e) => setName(e.target.value)} type=\"text\" placeholder=\"Name\" pattern=\"^[\\w]{3,16}$\" autofocus=\"autofocus\" required=\"required\" class=\"input pass\" />\n            <input name=\"user[email]\" type=\"email\" onChange={(e) => setEmail(e.target.value)}  placeholder=\"Email address\" class=\"input pass\" />\n            <input type=\"submit\" value=\"Contact Us\" class=\"inputButton\" />\n            <div class=\"text-center\">\n            By submitting my information I agree to the terms and conditions described in the privacy statement regarding the use of my personal data and the use of cookies.\n            </div>\n        </form>\n        </div>\n        </div>\n\n    )\n}\n\nexport default Form\n","import React from 'react';\nimport '../App.css';\nimport useAxios from \"../Hooks/useAxios\"\nimport Form from \"./Form\"\nimport Axios from 'axios';\n\nconst Demo = () => {\n    const { response, error } = useAxios(\"https://headless-cms-backend.herokuapp.com/demos\")\n\n    const handleSubmit = (name, email) => {\n        Axios.post(\"https://headless-cms-backend.herokuapp.com/requests\", {\n            name, email\n        }).then((res) => console.log(res))\n        .catch((er) => console.log(er))\n    }\n\n    return (\n        <div className=\"container\">\n            <div>\n                {response ? <h1>{response[0].headline}</h1> : null}\n                {response ? <p>{response[0].description}</p> : null}\n            </div>\n            <div className=\"image-demo\">\n                {response ? <img style={{ width: \"100%\" }} src={\"https://headless-cms-backend.herokuapp.com\" + response[0].media.formats.large.url}></img> : null}\n            </div>\n            <div className=\"form-demo\">\n                <Form submit={handleSubmit}/>\n            </div>\n        </div>\n    );\n};\nexport default Demo;\n","import React from 'react';\nimport logo from './logo.svg';\nimport Navbar from \"./components/Navbar\"\nimport Footer from \"./components/Footer\"\nimport Demo from \"./components/Demo\"\n\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Demo />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}